/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppAboutRouteImport } from './routes/_app/about'
import { Route as AppColorHexRouteImport } from './routes/_app/color/$hex'
import { ServerRoute as ApiColorServerRouteImport } from './routes/api/$color'

const rootServerRouteImport = createServerRootRoute()

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAboutRoute = AppAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppColorHexRoute = AppColorHexRouteImport.update({
  id: '/color/$hex',
  path: '/color/$hex',
  getParentRoute: () => AppRouteRoute,
} as any)
const ApiColorServerRoute = ApiColorServerRouteImport.update({
  id: '/api/$color',
  path: '/api/$color',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof AppAboutRoute
  '/': typeof AppIndexRoute
  '/color/$hex': typeof AppColorHexRoute
}
export interface FileRoutesByTo {
  '/about': typeof AppAboutRoute
  '/': typeof AppIndexRoute
  '/color/$hex': typeof AppColorHexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_app/about': typeof AppAboutRoute
  '/_app/': typeof AppIndexRoute
  '/_app/color/$hex': typeof AppColorHexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/' | '/color/$hex'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/' | '/color/$hex'
  id: '__root__' | '/_app' | '/_app/about' | '/_app/' | '/_app/color/$hex'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/$color': typeof ApiColorServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$color': typeof ApiColorServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$color': typeof ApiColorServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$color'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$color'
  id: '__root__' | '/api/$color'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiColorServerRoute: typeof ApiColorServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/about': {
      id: '/_app/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AppAboutRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/color/$hex': {
      id: '/_app/color/$hex'
      path: '/color/$hex'
      fullPath: '/color/$hex'
      preLoaderRoute: typeof AppColorHexRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$color': {
      id: '/api/$color'
      path: '/api/$color'
      fullPath: '/api/$color'
      preLoaderRoute: typeof ApiColorServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppAboutRoute: typeof AppAboutRoute
  AppIndexRoute: typeof AppIndexRoute
  AppColorHexRoute: typeof AppColorHexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAboutRoute: AppAboutRoute,
  AppIndexRoute: AppIndexRoute,
  AppColorHexRoute: AppColorHexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiColorServerRoute: ApiColorServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
