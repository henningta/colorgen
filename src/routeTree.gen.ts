/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as AppRouteRouteImport } from './routes/_app/route';
import { Route as AppIndexRouteImport } from './routes/_app/index';
import { Route as AppAboutRouteImport } from './routes/_app/about';
import { Route as AppColorHexRouteImport } from './routes/_app/color/$hex';

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any);
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any);
const AppAboutRoute = AppAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AppRouteRoute,
} as any);
const AppColorHexRoute = AppColorHexRouteImport.update({
  id: '/color/$hex',
  path: '/color/$hex',
  getParentRoute: () => AppRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/about': typeof AppAboutRoute;
  '/': typeof AppIndexRoute;
  '/color/$hex': typeof AppColorHexRoute;
}
export interface FileRoutesByTo {
  '/about': typeof AppAboutRoute;
  '/': typeof AppIndexRoute;
  '/color/$hex': typeof AppColorHexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_app': typeof AppRouteRouteWithChildren;
  '/_app/about': typeof AppAboutRoute;
  '/_app/': typeof AppIndexRoute;
  '/_app/color/$hex': typeof AppColorHexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/about' | '/' | '/color/$hex';
  fileRoutesByTo: FileRoutesByTo;
  to: '/about' | '/' | '/color/$hex';
  id: '__root__' | '/_app' | '/_app/about' | '/_app/' | '/_app/color/$hex';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AppRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_app/': {
      id: '/_app/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AppIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    '/_app/about': {
      id: '/_app/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AppAboutRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    '/_app/color/$hex': {
      id: '/_app/color/$hex';
      path: '/color/$hex';
      fullPath: '/color/$hex';
      preLoaderRoute: typeof AppColorHexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
  }
}

interface AppRouteRouteChildren {
  AppAboutRoute: typeof AppAboutRoute;
  AppIndexRoute: typeof AppIndexRoute;
  AppColorHexRoute: typeof AppColorHexRoute;
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAboutRoute: AppAboutRoute,
  AppIndexRoute: AppIndexRoute,
  AppColorHexRoute: AppColorHexRoute,
};

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
